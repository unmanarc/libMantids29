#ifndef ACCOUNT_SECRET_VALIDATOR_H
#define ACCOUNT_SECRET_VALIDATOR_H

#include <string>
#include <set>

#include "ds_auth_mode.h"
#include "ds_auth_reason.h"
#include "ds_auth_function.h"
#include "ds_auth_secret.h"

#include <Mantids29/Threads/mapitem.h>

namespace Mantids29 { namespace Authentication {

struct ApplicationAttribute {
    bool operator<(const ApplicationAttribute & x) const
    {
        if (x.appName < appName) return true;
        else if (x.appName == appName && x.attribName < attribName) return true;
        else return false;
    }
    std::string appName,attribName;
};

/**
 * @brief The ClientDetails struct contains details about an incoming client connection.
 */
struct ClientDetails {
    /**
     * @brief The IP address of the incoming client connection.
     */
    std::string ipAddress;

    /**
     * @brief Additional data associated with the incoming client connection.
     */
    std::string extraData;

    /**
     * @brief The common name associated with the client's TLS certificate.
     */
    std::string tlsCommonName;

    /**
     * @brief The user agent string associated with the incoming client connection.
     */
    std::string userAgent;
};


class AccountSecretValidator : public Mantids29::Threads::Safe::MapItem
{
public:
    AccountSecretValidator();
    virtual ~AccountSecretValidator();

    /**
     * @brief Returns the account confirmation token for a given account name.
     * @param accountName The name of the account to get the confirmation token for.
     * @return The confirmation token for the account.
     */
    virtual std::string getAccountConfirmationToken(const std::string& accountName) = 0;

    /**
     * @brief Returns the public data associated with an account's secret for a given account name and password index.
     * @param accountName The name of the account to get the secret public data for.
     * @param passwordIndex The password index to use for retrieving the account secret.
     * @return The public data associated with the account's secret.
     */
    virtual Secret_PublicData getAccountSecretPublicData(const std::string& accountName, uint32_t passwordIndex = 0) = 0;

    /**
     * @brief Authenticates a user's credentials for a given application, client, and account.
     * @param appName The name of the application that the user is authenticating for.
     * @param clientDetails Details about the incoming client connection.
     * @param accountName The name of the account to authenticate.
     * @param password The password to use for authentication.
     * @param passwordIndex The password index to use for authentication.
     * @param authMode The mode to use for authentication.
     * @param challengeSalt The salt to use for the authentication challenge.
     * @param accountPassIndexesUsedForLogin A map of password indexes that were used for login.
     * @return A reason indicating whether authentication was successful or not.
     */
    virtual Reason authenticate(const std::string& appName, const ClientDetails& clientDetails, const std::string& accountName, const std::string& password, uint32_t passwordIndex = 0, Mode authMode = MODE_PLAIN, const std::string& challengeSalt = "", std::map<uint32_t, std::string>* accountPassIndexesUsedForLogin = nullptr) = 0;

    /**
     * @brief Validates an account attribute for a given account name and application attribute.
     * @param accountName The name of the account to validate the attribute for.
     * @param applicationAttribute The application attribute to validate.
     * @return true if the account attribute is valid, false otherwise.
     */
    virtual bool validateAccountAttribute(const std::string& accountName, const ApplicationAttribute& applicationAttribute) = 0;

protected:
    /**
     * @brief Validates a stored secret against an input password and challenge salt.
     * @param storedSecret The stored secret to validate.
     * @param passwordInput The input password to use for validation.
     * @param challengeSalt The challenge salt to use for validation.
     * @param authMode The mode to use for authentication.
     * @return A reason indicating whether the stored secret was valid or not.
     */
    Reason validateStoredSecret(const Secret& storedSecret, const std::string& passwordInput, const std::string& challengeSalt, Mode authMode);

private:
    /**
     * @brief validateChallenge Validate the Challenge (SHA256(Pass+Salt))
     * @param passwordFromDB Incomming password from DB
     * @param challengeInput Challenge Input SHA256(Pass+Salt)
     * @param challengeSalt Challenge Salt (Random Value generated by your app, take the security considerations)
     * @return Authentication Response Reason (authenticated or bad password)
     */
    Reason validateChallenge(const std::string & passwordFromDB, const std::string & challengeInput, const std::string &challengeSalt);
    Reason validateGAuth(const std::string & seed, const std::string & tokenInput);
};

}}

#endif // ACCOUNT_SECRET_VALIDATOR_H
