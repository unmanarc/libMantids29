#include "manager.h"

#include <Mantids29/Threads/lock_shared.h>
#include <Mantids29/Helpers/random.h>

using namespace Mantids29::Authentication;


Manager::Manager()
{
    bAuthPolicyMaxTries = 4;
    bAuthPolicyAbandonedAccountExpirationSeconds = 180 * 24 * 3600; // 6 Months..
}

Manager::~Manager()
{
}

bool Manager::initAccounts()
{
    // create the default account.
    Secret secretData;
    secretData.forceExpiration = true;
    secretData.hash = Mantids29::Helpers::Random::createRandomString(16);

    return accountAdd("admin",  // UserName
                      secretData, // Secret Info
                      { "", // Given Name
                        "", // Last Name
                        "", // Email
                        "Autogenerated Superuser Account", // Description
                        "" // Extra Data
                      },
                      0, // Expiration (don't expire)
                      { true, // enabled
                        true,// confirmed
                        true // superuser
                      }
                      );
}

Reason Manager::authenticate(const std::string &appName, const ClientDetails &clientDetails, const std::string &accountName, const std::string &incommingPassword, uint32_t passwordIndex, Mode authMode, const std::string &challengeSalt, std::map<uint32_t,std::string> *stAccountPassIndexesUsedForLogin)
{
    Reason ret = REASON_BAD_ACCOUNT;
    bool accountFound=false, indexFound=false;
    Secret pStoredSecretData;
    uint32_t _bAuthPolicyMaxTries=0;

    // If something changes in between,
    if (1)
    {
        Threads::Sync::Lock_RD lock(mutex);

        // Check if the user is enabled to authenticate in this APP:
        if (!applicationValidateAccount(appName,accountName))
            return REASON_BAD_ACCOUNT; // Account not available for this application.

        // Check if the retrieved secret
        pStoredSecretData = retrieveSecret(accountName,passwordIndex, &accountFound, &indexFound);
        _bAuthPolicyMaxTries = bAuthPolicyMaxTries;

        if (accountFound == false)
            ret = REASON_BAD_ACCOUNT;
        else if (indexFound == false)
            ret = REASON_PASSWORD_INDEX_NOTFOUND;
        else
        {
            time_t lastLogin = accountLastLogin(accountName);

            if      (!isAccountConfirmed(accountName))
                return REASON_UNCONFIRMED_ACCOUNT;

            else if (isAccountDisabled(accountName))
                return REASON_DISABLED_ACCOUNT;

            else if (isAccountExpired(accountName))
                return REASON_EXPIRED_ACCOUNT;

            else if (lastLogin+bAuthPolicyAbandonedAccountExpirationSeconds<time(nullptr))
                return REASON_EXPIRED_ACCOUNT;

            else
            {
                ret = validateStoredSecret(pStoredSecretData, incommingPassword, challengeSalt, authMode);

                // On successfull first login, give all pass indexes used for login...
                if ( IS_PASSWORD_AUTHENTICATED(ret) && stAccountPassIndexesUsedForLogin && passwordIndex == 0 )
                {
                    *stAccountPassIndexesUsedForLogin = accountPassIndexesUsedForLogin(accountName);

                    // If can't retrieve well the pass indexes used for login, return an authentication error for any valid idx 0 password (preventing error).
                    if (stAccountPassIndexesUsedForLogin->find(0xFFFFFFFF)!=stAccountPassIndexesUsedForLogin->end())
                        return REASON_INTERNAL_ERROR;
                }
            }
        }
    }

    // Register the change for max attempts...
    if ( !IS_PASSWORD_AUTHENTICATED( ret ) )
    {
        // Increment the counter and disable the account acording to the policy.
        if ( (pStoredSecretData.badAttempts + 1) >= _bAuthPolicyMaxTries )
        {
            // Disable the account...
            accountDisable(accountName,true);
        }
        else
        {
            incrementBadAttempts(accountName,passwordIndex);
        }
    }
    else
    {
        // Authenticated:
        updateLastLogin(accountName,passwordIndex,clientDetails);
        resetBadAttempts(accountName,passwordIndex);
    }


    return ret;
}

std::string Manager::genRandomConfirmationToken()
{
    return Mantids29::Helpers::Random::createRandomString(64);
}

uint32_t Manager::getBAuthPolicyMaxTries()
{
    Threads::Sync::Lock_RD lock(mutex);

    return bAuthPolicyMaxTries;
}

void Manager::setBAuthPolicyMaxTries(const uint32_t &value)
{
    Threads::Sync::Lock_RW lock(mutex);

    bAuthPolicyMaxTries = value;
}

Secret_PublicData Manager::getAccountSecretPublicData(const std::string &accountName, uint32_t passIndex)
{
    // protective-limited method.
    bool bAccountFound = false;
    bool bIndexFound = false;
    Secret pd = retrieveSecret(accountName, passIndex, &bAccountFound, &bIndexFound);
    Secret_PublicData pdb;

    if (bAccountFound && bIndexFound)
    {
        pdb = pd.getBasicData();
        pdb.description = passIndexDescription(passIndex);

        auto forlogin = passIndexesRequiredForLogin();
        if (forlogin.find(passIndex) != forlogin.end())
        {
            pdb.requiredAtLogin=true;
        }
        if ( (pdb.badAttempts + 1) >= bAuthPolicyMaxTries )
        {
            pdb.locked = true;
        }
    }

    return pdb;
}

std::map<uint32_t, Secret_PublicData> Manager::getAccountAllSecretsPublicData(const std::string &accountName)
{
    std::map<uint32_t, Secret_PublicData> r;

    // Get every pass required for login (even if not present)
    std::set<uint32_t> indicesRequiredForLogin = passIndexesRequiredForLogin();
    std::set<uint32_t> indicesUsedByAccount =  passIndexesUsedByAccount(accountName);

    std::set<uint32_t> combinatedIndices;

    for (const auto & indexRequiredForLogin : indicesRequiredForLogin)
        combinatedIndices.insert(indexRequiredForLogin);

    for (const auto & indexUsedByAcct : indicesUsedByAccount)
        combinatedIndices.insert(indexUsedByAcct);

    for (const auto & passwordIndex: combinatedIndices)
    {
        r[passwordIndex] = getAccountSecretPublicData(accountName,passwordIndex);
    }

    return r;

}

std::map<uint32_t,std::string> Manager::accountPassIndexesUsedForLogin(const std::string &accountName)
{
    std::map<uint32_t,std::string> r;
    std::set<uint32_t> indicesRequiredForLogin = passIndexesRequiredForLogin();

    if (indicesRequiredForLogin.empty())
    {
        // Weird... could even be a database error... add impossible's r.
        r[0xFFFFFFFF] = "";
        return r;
    }

    for (const auto & indexUsedByTheAccount : passIndexesUsedByAccount(accountName))
    {
        if (indicesRequiredForLogin.find(indexUsedByTheAccount)!=indicesRequiredForLogin.end())
            r[indexUsedByTheAccount] = passIndexDescription(indexUsedByTheAccount);
    }

    return r;
}

bool Manager::accountChangeAuthenticatedSecret(const std::string & appName, const std::string &accountName, uint32_t passIndex, const std::string &sCurrentPassword, const Secret &passwordData, const ClientDetails & clientInfo, Mode authMode, const std::string &challengeSalt)
{
    // Authenticate the current passIndex.
    auto i = authenticate(appName,clientInfo,accountName,sCurrentPassword,passIndex,authMode,challengeSalt);

    // If this pass index is not found for this user, make the authentication with the 0 (master password)
    if (i == REASON_PASSWORD_INDEX_NOTFOUND)
    {
        // > We want to define a new password index if not exist.
        i = authenticate(appName,clientInfo,accountName,sCurrentPassword,0,authMode,challengeSalt);
        // Now i contains AUTHENTICATED if the password was validated agains index 0.
    }

    // TODO: ask/validate for all required authentication items, not only the master password.

    // Now take the authentication and add/change the secret
    if ( IS_PASSWORD_AUTHENTICATED(i) )
    {
        // Change the requested index.
        return accountChangeSecret(accountName,passwordData,passIndex);
    }

    return false;
}

bool Manager::isAccountExpired(const std::string &accountName)
{
    time_t tAccountExpirationDate = accountExpirationDate(accountName);
    if (!tAccountExpirationDate) return false;
    return tAccountExpirationDate<time(nullptr);
}

std::set<ApplicationAttribute> Manager::accountUsableAttribs(const std::string &accountName)
{
    std::set<ApplicationAttribute> x;
    Threads::Sync::Lock_RD lock(mutex);
    // Take attribs from the account
    for (const ApplicationAttribute & attrib : accountDirectAttribs(accountName,false))
        x.insert(attrib);

    // Take the attribs from the belonging groups
    for (const std::string & groupName : accountGroups(accountName,false))
    {
        for (const ApplicationAttribute & attrib : groupAttribs(groupName,false))
            x.insert(attrib);
    }
    return x;
}

bool Manager::superUserAccountExist()
{
    auto accounts = accountsList();
    for (const std::string & account : accounts)
    {
        if (isAccountSuperUser(account))
            return true;
    }
    return false;
}

bool Manager::validateAccountAttribute(const std::string &accountName, const ApplicationAttribute & applicationAttrib)
{
    Threads::Sync::Lock_RD lock(mutex);
    if (accountValidateDirectAttribute(accountName,applicationAttrib))
    {
        return true;
    }
    for (const std::string & groupName : accountGroups(accountName,false))
    {
        if (groupValidateAttribute(groupName, applicationAttrib,false))
        {
            return true;
        }
    }
    return false;
}
